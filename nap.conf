# vim: set syntax=nginx ft=nginx

load_module modules/ngx_http_app_protect_module.so;

events { }

http {
#
# Default NGINX App Protect settings - They are inherited (and can be overridden by server and location blocks within
  app_protect_enable on;
  app_protect_security_log_enable on;
  app_protect_security_log "/etc/nginx/json/custom_log_format.json" stderr;
  #app_protect_security_log "/opt/app_protect/share/defaults/log_all.json" /var/log/app_protect/requests.log;

  log_format  main  '$remote_addr - policy=$app_protect_policy_name,client='
                    '"$http_x_forwarded_for" $app_protect_outcome_reason';

  access_log  /var/log/nginx/access.log  main;

  include       /etc/nginx/mime.types; 

#
# Define Key-Value Store for the IP address override table
  keyval_zone zone=ip_override:1m type=ip state=/var/lib/nginx/state/ip.keyval timeout=10m sync;
  keyval $http_x_forwarded_for $override zone=ip_override;

#
# Define Rate Limits for the three security policies
  limit_req_zone $http_x_forwarded_for zone=default_rate:1m rate=1r/s sync;
  limit_req_zone $http_x_forwarded_for zone=medium_rate:1m rate=1r/s sync;
  limit_req_zone $http_x_forwarded_for zone=strict_rate:1m rate=1r/s sync;

#
# Select security policy based on browser user agent
  map $http_user_agent $policy {
    default default;
    ~(Chrome|Android) strict;
    ~(Safari|iPhone) medium;
  }

#
# Use Docker's built-in DNS server for service discovery
  resolver 127.0.0.11 valid=10s status_zone=docker_dns;

  upstream backends {
      zone backends 64k;
      server pool resolve;
  }

#
# Inbound traffic arrives on port 80
  server {
    listen 80;
    status_zone http_traffic;

    if ($override) {
      set $policy $override;
    }

    location / {
      app_protect_enable off;
      try_files $uri @$policy;
    }

#
# Per bucket rate limit, security policy, and statistics gathering
    location @default {
      limit_req zone=default_rate;
      app_protect_policy_file "/etc/nginx/json/customer_default.json";
      status_zone default_traffic;
      proxy_pass http://backends;
    }
    location @medium {
      limit_req zone=medium_rate burst=2;
      app_protect_policy_file "/etc/nginx/json/customer_medium.json";
      status_zone medium_traffic;
      proxy_pass http://backends;
    }
    location @strict {
      limit_req zone=strict_rate burst=2;
      app_protect_policy_file "/etc/nginx/json/customer_strict.json";
      status_zone strict_traffic;
      proxy_pass http://backends;
    }

#
# NGINX Plus API for updating key-value store, and providing metrics for dashboard
    location /api {
      app_protect_enable off;
      api write=on;
      access_log off;
    }

#
# NGINX Plus Realtime monitoring dashboard
    location /dashboard.html {
      app_protect_enable off;
      root   /usr/share/nginx/html;
    }
  }
}

#
# Zone Synchronization happens over port 9000
 stream {

  resolver 127.0.0.11 valid=10s;

     server {
         listen 9000;
         zone_sync;
         zone_sync_server nap:9000 resolve;
     }
 }

